1. Two Sum (Array Problem)

Question:
Given an array of integers nums and a target value target, return indices of the two numbers that add up to target.

Example:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]

Solution:

def two_sum(nums, target):
    seen = {}
    for i, num in enumerate(nums):
        rem = target - num
        if rem in seen:
            return [seen[rem], i]
        seen[num] = i

print(two_sum([2,7,11,15], 9))  # [0, 1]


Time Complexity: O(n)
Space Complexity: O(n)

2. Move All Zeroes to End

Question:
Move all zeroes in an array to the end while maintaining the order of non-zero elements.

Example:
Input: [0, 1, 0, 3, 12]
Output: [1, 3, 12, 0, 0]

Solution:

def move_zeroes(nums):
    pos = 0
    for i in range(len(nums)):
        if nums[i] != 0:
            nums[i], nums[pos] = nums[pos], nums[i]
            pos += 1
    return nums

print(move_zeroes([0, 1, 0, 3, 12]))  # [1, 3, 12, 0, 0]


Time Complexity: O(n)
Space Complexity: O(1)

3. Longest Common Prefix

Question:
Find the longest common prefix among an array of strings.

Example:
Input: ["flower","flow","flight"]
Output: "fl"

Solution:

def longest_common_prefix(strs):
    if not strs:
        return ""
    prefix = strs[0]
    for word in strs[1:]:
        while word[:len(prefix)] != prefix and prefix:
            prefix = prefix[:-1]
    return prefix

print(longest_common_prefix(["flower","flow","flight"]))  # fl


Time Complexity: O(n·m) (n = number of strings, m = length of smallest string)

4. Kadane’s Algorithm (Maximum Subarray Sum)

Question:
Find the contiguous subarray (containing at least one number) with the largest sum.

Example:
Input: [-2,1,-3,4,-1,2,1,-5,4]
Output: 6 (subarray [4,-1,2,1])

Solution:

def max_subarray(nums):
    max_sum = curr_sum = nums[0]
    for num in nums[1:]:
        curr_sum = max(num, curr_sum + num)
        max_sum = max(max_sum, curr_sum)
    return max_sum

print(max_subarray([-2,1,-3,4,-1,2,1,-5,4]))  # 6


Time Complexity: O(n)
Space Complexity: O(1)

5. Valid Anagram

Question:
Given two strings s and t, check if t is an anagram of s.

Example:
Input: s = "anagram", t = "nagaram"
Output: True

Solution:

def is_anagram(s, t):
    return sorted(s) == sorted(t)

print(is_anagram("anagram", "nagaram"))  # True


Time Complexity: O(n log n)
Alternative: Use collections.Counter for O(n)

6. Merge Two Sorted Arrays

Question:
Given two sorted arrays, merge them into a single sorted array.

Example:
Input: [1,3,5] and [2,4,6]
Output: [1,2,3,4,5,6]

Solution:

def merge_sorted_arrays(a, b):
    i = j = 0
    merged = []
    while i < len(a) and j < len(b):
        if a[i] < b[j]:
            merged.append(a[i]); i += 1
        else:
            merged.append(b[j]); j += 1
    merged.extend(a[i:])
    merged.extend(b[j:])
    return merged

print(merge_sorted_arrays([1,3,5], [2,4,6]))  # [1,2,3,4,5,6]


Time Complexity: O(n + m)

7. Valid Parentheses

Question:
Check if a given string of parentheses is valid.

Example:
Input: "({[]})" → Output: True
Input: "([)]" → Output: False

Solution:

def is_valid(s):
    stack = []
    mapping = {')':'(', '}':'{', ']':'['}
    for char in s:
        if char in mapping:
            if not stack or stack[-1] != mapping[char]:
                return False
            stack.pop()
        else:
            stack.append(char)
    return not stack

print(is_valid("({[]})"))  # True


Time Complexity: O(n)
Space Complexity: O(n)

8. Binary Search

Question:
Implement binary search on a sorted list.

Example:
Input: arr = [1, 3, 5, 7, 9], target = 7
Output: 3

Solution:

def binary_search(arr, target):
    low, high = 0, len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1

print(binary_search([1, 3, 5, 7, 9], 7))  # 3


Time Complexity: O(log n)
